{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jhonniel\\\\Documents\\\\React tutorial\\\\18-nextJs\\\\06-onwards-to-a-bigger-project-starting-project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetUpDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.meetupData.image,\n    title: props.meetupData.title,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  // fetch data from an API\n  const client = await MongoClient.connect(\"mongodb+srv://jarrel_14:YPtSLQbUVUBtwL8I@cluster0.f34cpmb.mongodb.net/?retryWrites=true&w=majority\"); // The .db command will create a new database if it doesn't exist, otherwise it will return the existing database.\n\n  const db = client.db(); // The .collection command will pick up the data from the db\n\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetups => ({\n      params: {\n        meetupId: meetups._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://jarrel_14:YPtSLQbUVUBtwL8I@cluster0.f34cpmb.mongodb.net/?retryWrites=true&w=majority\"); // The .db command will create a new database if it doesn't exist, otherwise it will return the existing database.\n\n  const db = client.db(); // The .collection command will pick up the data from the db\n\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetups = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  console.log(selectedMeetups);\n  return {\n    props: {\n      meetupData: selectedMeetups\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["C:/Users/Jhonniel/Documents/React tutorial/18-nextJs/06-onwards-to-a-bigger-project-starting-project/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","props","meetupData","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","params","meetupId","toString","getStaticProps","context","selectedMeetups","findOne","console","log"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,UAAN,CAAiBC,KAD1B;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,UAAN,CAAiBE,KAF1B;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,UAAN,CAAiBG,OAH5B;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,UAAN,CAAiBI;AAJhC;AAAA;AAAA;AAAA;AAAA,UADF;AAQD;;AACD,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,oGADmB,CAArB,CAFqC,CAKrC;;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CANqC,CAOrC;;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaP,OAAD,KAAc;AAC/BQ,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAET,OAAO,CAACE,GAAR,CAAYQ,QAAZ;AAAZ;AADuB,KAAd,CAAZ;AAFF,GAAP;AAMD;AAED,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C,QAAMH,QAAQ,GAACG,OAAO,CAACJ,MAAR,CAAeC,QAA9B;AACA,QAAMd,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,oGADmB,CAArB,CAF4C,CAK5C;;AACA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX,CAN4C,CAO5C;;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMc,eAAe,GAAC,MAAMf,iBAAiB,CAACgB,OAAlB,CAA0B;AAACZ,IAAAA,GAAG,EAACO;AAAL,GAA1B,CAA5B;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYH,eAAZ;AACA,SAAO;AACLzB,IAAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAEwB;AADP;AADF,GAAP;AAKD;AACD,eAAe1B,aAAf","sourcesContent":["import { MongoClient } from \"mongodb\";\r\nimport MeetupDetail from \"../../components/meetups/MeetUpDetail\";\r\nfunction MeetupDetails(props) {\r\n  return (\r\n    <MeetupDetail\r\n      image={props.meetupData.image}\r\n      title={props.meetupData.title}\r\n      address={props.meetupData.address}\r\n      description={props.meetupData.description}\r\n    />\r\n  );\r\n}\r\nexport async function getStaticPaths() {\r\n  // fetch data from an API\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://jarrel_14:YPtSLQbUVUBtwL8I@cluster0.f34cpmb.mongodb.net/?retryWrites=true&w=majority\"\r\n  );\r\n  // The .db command will create a new database if it doesn't exist, otherwise it will return the existing database.\r\n  const db = client.db();\r\n  // The .collection command will pick up the data from the db\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n  client.close();\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meetups) => ({\r\n      params: { meetupId: meetups._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\nexport async function getStaticProps(context) {\r\n  const meetupId=context.params.meetupId;\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://jarrel_14:YPtSLQbUVUBtwL8I@cluster0.f34cpmb.mongodb.net/?retryWrites=true&w=majority\"\r\n  );\r\n  // The .db command will create a new database if it doesn't exist, otherwise it will return the existing database.\r\n  const db = client.db();\r\n  // The .collection command will pick up the data from the db\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const selectedMeetups=await meetupsCollection.findOne({_id:meetupId});\r\n  console.log(selectedMeetups);\r\n  return {\r\n    props: {\r\n      meetupData: selectedMeetups,\r\n    },\r\n  };\r\n}\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}